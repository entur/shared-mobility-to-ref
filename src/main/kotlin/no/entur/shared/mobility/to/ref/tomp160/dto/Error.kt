package no.entur.shared.mobility.to.ref.tomp160.dto

import java.util.Locale
import java.util.Objects
import com.fasterxml.jackson.annotation.JsonProperty
import jakarta.validation.constraints.DecimalMax
import jakarta.validation.constraints.DecimalMin
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import jakarta.validation.Valid
import io.swagger.v3.oas.annotations.media.Schema

/**
 * An error that the service may send, e.g. in case of invalid input, missing authorization or internal service error. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for further explanation of error code.
 * @param errorcode The TOMP specific error code. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for more details of this error.
 * @param type The category of this type of error.
 * @param title A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except to match Content-Language
 * @param status The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
 * @param detail A human-readable explanation specific to this occurrence of the problem, could match Content-Language
 * @param instance A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.
 */
data class Error(

    @Schema(example = "null", description = "The TOMP specific error code. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for more details of this error.")
    @get:JsonProperty("errorcode") val errorcode: kotlin.Int? = null,

    @Schema(example = "null", description = "The category of this type of error.")
    @get:JsonProperty("type") val type: kotlin.String? = null,

    @Schema(example = "null", description = "A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except to match Content-Language")
    @get:JsonProperty("title") val title: kotlin.String? = null,

    @Schema(example = "null", description = "The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.")
    @get:JsonProperty("status") val status: kotlin.Int? = null,

    @Schema(example = "null", description = "A human-readable explanation specific to this occurrence of the problem, could match Content-Language")
    @get:JsonProperty("detail") val detail: kotlin.String? = null,

    @Schema(example = "null", description = "A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.")
    @get:JsonProperty("instance") val instance: kotlin.String? = null
) {

}

